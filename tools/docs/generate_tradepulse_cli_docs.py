#!/usr/bin/env python3
"""Generate Markdown documentation for the TradePulse CLI commands."""

from __future__ import annotations

import sys
from pathlib import Path
from textwrap import dedent
from typing import Dict, Iterable, List

from click.testing import CliRunner

# Ensure the repository root is on the Python path when the script is executed
# from any location.
ROOT = Path(__file__).resolve().parents[2]
if str(ROOT) not in sys.path:
    sys.path.insert(0, str(ROOT))

from cli.tradepulse_cli import cli  # noqa: E402

COMMANDS: List[str] = [
    "ingest",
    "materialize",
    "backtest",
    "train",
    "serve",
    "report",
]

ALIASES: Dict[str, str] = {
    "materialize": "ingest",
    "train": "optimize",
    "serve": "exec",
}

EXAMPLES: Dict[str, List[str]] = {
    "ingest": [
        "tradepulse-cli ingest --generate-config --template-output configs/ingest.yaml",
        "tradepulse-cli ingest --config configs/ingest.yaml",
    ],
    "materialize": [
        "tradepulse-cli materialize --generate-config --template-output configs/materialize.yaml",
        "tradepulse-cli materialize --config configs/materialize.yaml",
    ],
    "backtest": [
        "tradepulse-cli backtest --generate-config --template-output configs/backtest.yaml",
        "tradepulse-cli backtest --config configs/backtest.yaml --output jsonl",
    ],
    "train": [
        "tradepulse-cli train --generate-config --template-output configs/train.yaml",
        "tradepulse-cli train --config configs/train.yaml --output table",
    ],
    "serve": [
        "tradepulse-cli serve --generate-config --template-output configs/serve.yaml",
        "tradepulse-cli serve --config configs/serve.yaml --output jsonl",
    ],
    "report": [
        "tradepulse-cli report --generate-config --template-output configs/report.yaml",
        "tradepulse-cli report --config configs/report.yaml --output table",
    ],
}

OUTPUT_PATH = ROOT / "docs" / "tradepulse_cli_reference.md"


def _collect_help(args: Iterable[str]) -> str:
    runner = CliRunner()
    result = runner.invoke(cli, list(args))
    if result.exit_code != 0:
        raise RuntimeError(
            f"Failed to render help for '{' '.join(args)}': {result.output}"
        )
    return result.output.strip()


def _render_examples(command: str) -> str:
    items = EXAMPLES.get(command, [])
    if not items:
        return ""
    lines = ["#### Examples", ""]
    for example in items:
        lines.append(f"- `{example}`")
    lines.append("")
    return "\n".join(lines)


def _render_command_section(command: str) -> str:
    parts: List[str] = [f"### `{command}`", ""]
    if command in ALIASES:
        target = ALIASES[command]
        parts.append(f"> Alias for `{target}`.")
        parts.append("")
    help_output = _collect_help([command, "--help"])
    parts.append("#### --help")
    parts.append("")
    parts.append("```text")
    parts.append(help_output)
    parts.append("```")
    parts.append("")
    examples = _render_examples(command)
    if examples:
        parts.append(examples)
    return "\n".join(parts)


def build_documentation() -> str:
    header = dedent(
        """
        # TradePulse CLI Command Reference

        _This file is auto-generated by `tools/docs/generate_tradepulse_cli_docs.py`. Do not edit manually._
        """
    ).strip()

    root_help = _collect_help(["--help"])
    sections = [header, "", "## Global usage", "", "```text", root_help, "```", ""]

    for command in COMMANDS:
        sections.append(_render_command_section(command))
        sections.append("")

    return "\n".join(sections).rstrip() + "\n"


def main() -> None:
    document = build_documentation()
    OUTPUT_PATH.write_text(document, encoding="utf-8")
    print(f"Wrote CLI documentation to {OUTPUT_PATH.relative_to(ROOT)}")


if __name__ == "__main__":
    main()
