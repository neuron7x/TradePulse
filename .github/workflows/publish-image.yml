name: Publish signed container image

on:
  release:
    types: [published]

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  build-and-sign:
    name: Build, push, and sign container image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-name: ${{ steps.image-metadata.outputs.image-name }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate release metadata
        id: release
        run: |
          tag="${{ github.event.release.tag_name }}"
          version="${tag#v}"
          if ! [[ "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z.-]+)?$ ]]; then
            echo "::error::Release tag '$tag' must follow SemVer (with optional leading 'v')."
            exit 1
          fi
          file_version="$(tr -d "\n" < VERSION)"
          if [ "$file_version" != "$version" ]; then
            echo "::error::VERSION file ($file_version) does not match release tag ($version)."
            exit 1
          fi
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=${{ steps.release.outputs.version }}
            type=raw,value=latest

      - name: Build and push image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Record image metadata
        id: image-metadata
        run: |
          echo "image-name=ghcr.io/${{ github.repository }}" >> "$GITHUB_OUTPUT"

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.5.0

      - name: Sign container image (keyless)
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign sign --yes ghcr.io/${{ github.repository }}@${{ steps.build.outputs.digest }}

  provenance:
    name: Generate SLSA provenance
    needs: build-and-sign
    permissions:
      contents: read
      id-token: write
      actions: read
      packages: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.0.0
    with:
      image: ${{ needs.build-and-sign.outputs.image-name }}
      digest: ${{ needs.build-and-sign.outputs.image-digest }}
      registry-username: ${{ github.actor }}
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}
