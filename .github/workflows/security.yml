################################################################################
# Security Scanning Workflow for TradePulse
# 
# This workflow implements comprehensive security scanning for professional CI/CD:
# 1. Secret scanning using multiple tools (custom scanner, TruffleHog, Gitleaks)
# 2. Static code analysis with Bandit (Python security linter)
# 3. Dependency vulnerability scanning with pip-audit (custom ignore logic)
# 4. CodeQL analysis for advanced static security analysis
#
# All jobs run in parallel for speed and output artifacts for auditing.
################################################################################

name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly security scans on Monday at 00:00 UTC
    - cron: '0 0 * * 1'
  # Allow manual trigger for on-demand security audits
  workflow_dispatch:

jobs:
  #############################################################################
  # Job 1: Secret Scanning
  # Detects hardcoded secrets, API keys, passwords, and sensitive data
  # Uses: Custom Python scanner, TruffleHog, and Gitleaks
  #############################################################################
  secret-scan:
    name: Secret Scanning (Multi-Tool)
    runs-on: ubuntu-latest
    
    steps:
    # Checkout with full history for comprehensive secret scanning
    - name: Checkout repository with full history
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full git history needed for secret detection
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    # Install security scanning tools
    - name: Install security scanning dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    # Run custom secret detection from TradePulse security utils
    - name: Run custom Python secret scanner
      run: |
        python -c "
        from core.utils.security import check_for_hardcoded_secrets
        import sys
        if check_for_hardcoded_secrets('.'):
            print('❌ Secrets detected in codebase!')
            sys.exit(1)
        else:
            print('✅ No secrets detected by custom scanner')
        "
    
    # TruffleHog: Scans git history for secrets
    - name: Run TruffleHog secret scanner
      uses: trufflesecurity/trufflehog@main
      with:
        # Scan entire git history
        path: ./
        # Scan commits, not just current state
        base: ""
        head: HEAD
        # Generate JSON output for artifact
        extra_args: --json --only-verified
      continue-on-error: true  # Don't fail workflow, just report
    
    # Gitleaks: Fast secret detection in git repositories
    - name: Run Gitleaks secret scanner
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # Generate report file for artifact upload
        GITLEAKS_ENABLE_SUMMARY: true
      continue-on-error: true  # Don't fail workflow, just report
    
    # Upload all secret scanning reports as artifacts
    - name: Upload secret scanning reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: secret-scan-reports
        path: |
          gitleaks-report.json
          results.json
        retention-days: 90  # Keep for audit trail

  #############################################################################
  # Job 2: Python Security Linting with Bandit
  # Scans Python code for common security issues and vulnerabilities
  #############################################################################
  bandit-scan:
    name: Bandit Security Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install Bandit
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml]
    
    # Bandit scans for:
    # - Hardcoded passwords and secrets
    # - SQL injection vulnerabilities
    # - Shell injection risks
    # - Use of assert in production code
    # - Insecure cryptographic functions
    # - And more...
    - name: Run Bandit security linter
      run: |
        echo "Running Bandit on Python codebase..."
        # Generate JSON report for artifacts
        bandit -r core/ backtest/ execution/ interfaces/ -f json -o bandit-report.json || true
        # Also show results in console (fail on medium/high severity)
        bandit -r core/ backtest/ execution/ interfaces/ -ll
    
    # Always upload Bandit report, even if scan fails
    - name: Upload Bandit security report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: bandit-security-report
        path: bandit-report.json
        retention-days: 90

  #############################################################################
  # Job 3: Dependency Vulnerability Scanning
  # Checks for known vulnerabilities in Python dependencies
  # Uses pip-audit with custom logic to ignore specific known issues
  #############################################################################
  dependency-scan:
    name: Dependency Vulnerability Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependency scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-audit safety
    
    # Install project dependencies to scan them
    - name: Install project dependencies
      run: |
        pip install -r requirements.txt || true
    
    # pip-audit with custom bash logic:
    # - Ignore only pip 25.2 vulnerability (known safe in our context)
    # - Fail workflow for any other vulnerabilities
    - name: Run pip-audit with custom ignore logic
      id: pip-audit
      run: |
        echo "Running pip-audit with custom vulnerability filtering..."
        
        # Run pip-audit and capture output to JSON
        pip-audit --desc --format json -o pip-audit-report.json || true
        
        # Custom bash logic to filter vulnerabilities
        # Parse JSON and check for vulnerabilities excluding pip 25.2
        if [ -f pip-audit-report.json ]; then
          # Extract vulnerabilities, excluding pip version 25.2
          FILTERED_VULNS=$(python3 << 'EOF'
        import json
        import sys
        
        try:
            with open('pip-audit-report.json', 'r') as f:
                data = json.load(f)
            
            # Filter out pip 25.2 vulnerabilities
            critical_vulns = []
            for vuln in data.get('dependencies', []):
                pkg_name = vuln.get('name', '')
                pkg_version = vuln.get('version', '')
                
                # Skip pip version 25.2 (known safe in our context)
                if pkg_name.lower() == 'pip' and pkg_version == '25.2':
                    print(f"⏭️  Ignoring known safe vulnerability: {pkg_name} {pkg_version}")
                    continue
                
                # Check if there are actual vulnerabilities
                vulns = vuln.get('vulns', [])
                if vulns:
                    critical_vulns.append({
                        'package': pkg_name,
                        'version': pkg_version,
                        'vulns': vulns
                    })
            
            if critical_vulns:
                print(f"❌ Found {len(critical_vulns)} critical vulnerabilities (excluding ignored pip 25.2):")
                for v in critical_vulns:
                    print(f"  - {v['package']} {v['version']}: {len(v['vulns'])} vulnerability(ies)")
                sys.exit(1)
            else:
                print("✅ No critical vulnerabilities found (pip 25.2 ignored as expected)")
                sys.exit(0)
        except Exception as e:
            print(f"Error parsing pip-audit report: {e}")
            sys.exit(0)  # Don't fail on parsing errors
        EOF
        )
        fi
        
        # Display full report for transparency
        echo "Full pip-audit report:"
        pip-audit --desc || true
    
    # Run safety check as additional validation
    - name: Check for known vulnerabilities with Safety
      run: |
        echo "Running Safety vulnerability check..."
        safety check --json --output safety-report.json || true
        safety check || true
    
    # Upload all dependency scan reports
    - name: Upload dependency scan reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: dependency-scan-reports
        path: |
          pip-audit-report.json
          safety-report.json
        retention-days: 90

  #############################################################################
  # Job 4: CodeQL Static Analysis
  # Advanced semantic code analysis for security vulnerabilities
  # Detects complex security issues that simple pattern matching misses
  #############################################################################
  codeql-analysis:
    name: CodeQL Static Analysis
    runs-on: ubuntu-latest
    permissions:
      # Required for CodeQL to upload results to GitHub Security tab
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    # Initialize CodeQL with security-extended queries
    # This provides deeper analysis than standard queries
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python
        # Use security-extended query suite for comprehensive analysis
        queries: security-extended
    
    # CodeQL analyzes the codebase for:
    # - SQL injection
    # - Command injection
    # - Path traversal
    # - XSS vulnerabilities
    # - Insecure deserialization
    # - And many more security issues
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:python"
        # Results automatically uploaded to GitHub Security tab
        upload: true
    
    # Note: CodeQL results are automatically uploaded to GitHub Security
    # and can be viewed in the Security tab of the repository
