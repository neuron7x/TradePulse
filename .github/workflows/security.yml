name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly on Monday at 00:00 UTC
    - cron: '0 0 * * 1'

jobs:
  secret-scan:
    name: Scan for Secrets
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Full history for better scanning
    
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run custom secret scanner
      run: |
        python -c "
        from core.utils.security import check_for_hardcoded_secrets
        import sys
        if check_for_hardcoded_secrets('.'):
            sys.exit(1)
        "
    
    - name: Run Bandit security linter
      run: |
        bandit -r core/ backtest/ execution/ -f json -o bandit-report.json || true
        bandit -r core/ backtest/ execution/ -ll
    - name: Run Bandit on test utilities
      run: |
        bandit -r tests/utils tests/scripts -ll
    
    - name: Upload Bandit report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: bandit-report
        path: bandit-report.json

  dependency-scan:
    name: Scan Dependencies
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt
        pip install safety pip-audit
    
    - name: Check for known vulnerabilities with Safety
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Audit dependencies with pip-audit
      run: |
        # Run pip-audit and save the report
        pip-audit --desc -o pip-audit-report.json --format json || true
        
        # Display the full report for visibility
        pip-audit --desc || true
        
        # TEMPORARY WORKAROUND: Ignore known pip vulnerability GHSA-4xh5-x5gv-qwph (CVE-2025-8869)
        # This vulnerability is in pip itself and will be fixed in pip 25.3
        # We filter it out to avoid failing the build, but fail for any OTHER vulnerabilities
        # Reference: https://github.com/pypa/pip/security/advisories/GHSA-4xh5-x5gv-qwph
        
        # Use jq to check if there are any vulnerabilities OTHER than the known pip issue
        OTHER_VULNS=$(jq -r '
          [.dependencies[] | 
           select(.vulns != null and (.vulns | length) > 0) |
           .vulns[] |
           select(.id != "GHSA-4xh5-x5gv-qwph")
          ] | length
        ' pip-audit-report.json)
        
        echo "Found $OTHER_VULNS vulnerabilities (excluding GHSA-4xh5-x5gv-qwph)"
        
        if [ "$OTHER_VULNS" -gt 0 ]; then
          echo "ERROR: Found vulnerabilities other than the known pip issue GHSA-4xh5-x5gv-qwph"
          echo "Please review and fix these vulnerabilities:"
          jq -r '
            .dependencies[] | 
            select(.vulns != null and (.vulns | length) > 0) |
            .vulns[] |
            select(.id != "GHSA-4xh5-x5gv-qwph") |
            "  - \(.id): \(.description[:100])..."
          ' pip-audit-report.json
          exit 1
        else
          echo "SUCCESS: Only the known pip vulnerability GHSA-4xh5-x5gv-qwph is present"
          echo "This will be fixed when pip 25.3 is released"
        fi
    
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: dependency-reports
        path: |
          safety-report.json
          pip-audit-report.json

  osv-dependency-scan:
    name: Cross-language Dependency Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Install OSV-Scanner
      env:
        # Override this if a specific OSV release is required. Either `2.2.3` or `v2.2.3` is accepted.
        OSV_VERSION: ""
      run: |
        set -euo pipefail

        tmpdir="$(mktemp -d)"
        trap 'rm -rf "$tmpdir"' EXIT

        if [ -z "${OSV_VERSION:-}" ]; then
          echo "OSV_VERSION not provided; discovering the latest release tag"
          latest_tag=$(curl -sSfL https://api.github.com/repos/google/osv-scanner/releases/latest | jq -r '.tag_name // empty')
          if [ -z "$latest_tag" ]; then
            echo "Failed to determine the latest OSV-Scanner release tag" >&2
            exit 1
          fi
          OSV_VERSION="$latest_tag"
        fi

        # Strip an optional leading `v` so we can construct the asset name, but keep it for the tag path.
        clean_version="${OSV_VERSION#v}"
        release_tag="v${clean_version}"

        archive_tar="osv-scanner_${clean_version}_linux_amd64.tar.gz"
        archive_bin="osv-scanner_linux_amd64"
        tar_url="https://github.com/google/osv-scanner/releases/download/${release_tag}/${archive_tar}"
        bin_url="https://github.com/google/osv-scanner/releases/download/${release_tag}/${archive_bin}"

        echo "Attempting to download OSV-Scanner ${clean_version} tarball from ${tar_url}"
        if curl -sSfL --retry 5 --retry-delay 2 "$tar_url" -o "$tmpdir/$archive_tar"; then
          tar -xzf "$tmpdir/$archive_tar" -C "$tmpdir"
          binary_path="$tmpdir/osv-scanner_${clean_version}_linux_amd64/osv-scanner"
        else
          echo "Tarball unavailable; falling back to raw binary from ${bin_url}"
          if curl -sSfL --retry 5 --retry-delay 2 "$bin_url" -o "$tmpdir/$archive_bin"; then
            chmod +x "$tmpdir/$archive_bin"
            binary_path="$tmpdir/$archive_bin"
          else
            echo "Failed to download OSV-Scanner release from either ${tar_url} or ${bin_url}" >&2
            exit 1
          fi
        fi

        if [ ! -x "$binary_path" ]; then
          echo "Expected OSV-Scanner binary not found at $binary_path" >&2
          exit 1
        fi

        sudo install -m 0755 "$binary_path" /usr/local/bin/osv-scanner
    - name: Run OSV-Scanner on project manifests
      run: |
        set -euo pipefail
        files=()
        if [ -f go.sum ]; then files+=("--lockfile=go.sum"); fi
        if [ -f go.mod ]; then files+=("--lockfile=go.mod"); fi
        if [ -f requirements.txt ]; then files+=("--lockfile=requirements.txt"); fi
        if [ -f requirements-dev.txt ]; then files+=("--lockfile=requirements-dev.txt"); fi
        if [ -f requirements.lock ]; then files+=("--lockfile=requirements.lock"); fi
        if [ -f requirements-dev.lock ]; then files+=("--lockfile=requirements-dev.lock"); fi
        if [ -f rust/tradepulse-accel/Cargo.lock ]; then files+=("--lockfile=rust/tradepulse-accel/Cargo.lock"); fi
        if [ -f rust/tradepulse-accel/Cargo.toml ]; then files+=("--manifest=rust/tradepulse-accel/Cargo.toml"); fi

        if [ ${#files[@]} -eq 0 ]; then
          echo "No manifest or lock files were detected for OSV scanning."
          exit 0
        fi

        echo "Scanning with OSV-Scanner using: ${files[*]}"
        osv-scanner "${files[@]}"

  semgrep-sast:
    name: Semgrep SAST Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/ci

  container-scan:
    name: Container Image Scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build container image for scanning
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        load: true
        tags: tradepulse:ci-scan

    - name: Run Trivy scan (fail on critical CVEs)
      id: trivy-scan
      continue-on-error: true
      uses: aquasecurity/trivy-action@0.20.0
      with:
        image-ref: tradepulse:ci-scan
        format: 'sarif'
        severity: 'CRITICAL'
        ignore-unfixed: true
        exit-code: '1'
        output: trivy-results.sarif

    - name: Upload Trivy SARIF results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-results.sarif

    - name: Run Grype scan (fail on critical CVEs)
      id: grype-scan
      continue-on-error: true
      uses: anchore/scan-action@v3
      with:
        image: tradepulse:ci-scan
        fail-build: true
        severity-cutoff: critical
        output-format: sarif
        output-file: grype-results.sarif

    - name: Upload Grype SARIF results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: ${{ steps.grype-scan.outputs.sarif }}

    - name: Fail workflow on critical vulnerabilities
      if: always()
      env:
        TRIVY_OUTCOME: ${{ steps.trivy-scan.outcome }}
        GRYPE_OUTCOME: ${{ steps.grype-scan.outcome }}
      run: |
        if [ "$TRIVY_OUTCOME" = "failure" ] || [ "$GRYPE_OUTCOME" = "failure" ]; then
          echo "One or more container scans reported critical vulnerabilities."
          exit 1
        fi

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v4
      with:
        languages: python
        queries: security-extended
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v4
      with:
        category: "/language:python"
