name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly on Monday at 00:00 UTC
    - cron: '0 0 * * 1'

jobs:
  secret-scan:
    name: Scan for Secrets
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Full history for better scanning
    
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run custom secret scanner
      run: |
        python -c "
        from core.utils.security import check_for_hardcoded_secrets
        import sys
        if check_for_hardcoded_secrets('.'):
            sys.exit(1)
        "
    
    - name: Run Bandit security linter
      run: |
        bandit -r core/ backtest/ execution/ -f json -o bandit-report.json || true
        bandit -r core/ backtest/ execution/ -ll
    - name: Run Bandit on test utilities
      run: |
        bandit -r tests/utils tests/scripts -ll
    
    - name: Upload Bandit report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: bandit-report
        path: bandit-report.json

  dependency-scan:
    name: Scan Dependencies
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt
        pip install safety pip-audit
    
    - name: Check for known vulnerabilities with Safety
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Audit dependencies with pip-audit
      run: |
        # Run pip-audit and save the report
        pip-audit --desc -o pip-audit-report.json --format json || true
        
        # Display the full report for visibility
        pip-audit --desc || true
        
        # TEMPORARY WORKAROUND: Ignore known pip vulnerability GHSA-4xh5-x5gv-qwph (CVE-2025-8869)
        # This vulnerability is in pip itself and will be fixed in pip 25.3
        # We filter it out to avoid failing the build, but fail for any OTHER vulnerabilities
        # Reference: https://github.com/pypa/pip/security/advisories/GHSA-4xh5-x5gv-qwph
        
        # Use jq to check if there are any vulnerabilities OTHER than the known pip issue
        OTHER_VULNS=$(jq -r '
          [.dependencies[] | 
           select(.vulns != null and (.vulns | length) > 0) |
           .vulns[] |
           select(.id != "GHSA-4xh5-x5gv-qwph")
          ] | length
        ' pip-audit-report.json)
        
        echo "Found $OTHER_VULNS vulnerabilities (excluding GHSA-4xh5-x5gv-qwph)"
        
        if [ "$OTHER_VULNS" -gt 0 ]; then
          echo "ERROR: Found vulnerabilities other than the known pip issue GHSA-4xh5-x5gv-qwph"
          echo "Please review and fix these vulnerabilities:"
          jq -r '
            .dependencies[] | 
            select(.vulns != null and (.vulns | length) > 0) |
            .vulns[] |
            select(.id != "GHSA-4xh5-x5gv-qwph") |
            "  - \(.id): \(.description[:100])..."
          ' pip-audit-report.json
          exit 1
        else
          echo "SUCCESS: Only the known pip vulnerability GHSA-4xh5-x5gv-qwph is present"
          echo "This will be fixed when pip 25.3 is released"
        fi
    
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: dependency-reports
        path: |
          safety-report.json
          pip-audit-report.json

  container-scan:
    name: Container Image Scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build container image for scanning
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        load: true
        tags: tradepulse:ci-scan

    - name: Run Trivy scan (fail on critical CVEs)
      id: trivy-scan
      continue-on-error: true
      uses: aquasecurity/trivy-action@0.20.0
      with:
        image-ref: tradepulse:ci-scan
        format: 'sarif'
        severity: 'CRITICAL'
        ignore-unfixed: true
        exit-code: '1'
        output: trivy-results.sarif

    - name: Upload Trivy SARIF results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-results.sarif

    - name: Run Grype scan (fail on critical CVEs)
      id: grype-scan
      continue-on-error: true
      uses: anchore/scan-action@v3
      with:
        image: tradepulse:ci-scan
        fail-build: true
        severity-cutoff: critical
        output-format: sarif
        output-file: grype-results.sarif

    - name: Upload Grype SARIF results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: ${{ steps.grype-scan.outputs.sarif }}

    - name: Fail workflow on critical vulnerabilities
      if: always()
      env:
        TRIVY_OUTCOME: ${{ steps.trivy-scan.outcome }}
        GRYPE_OUTCOME: ${{ steps.grype-scan.outcome }}
      run: |
        if [ "$TRIVY_OUTCOME" = "failure" ] || [ "$GRYPE_OUTCOME" = "failure" ]; then
          echo "One or more container scans reported critical vulnerabilities."
          exit 1
        fi

  codeql-python:
    name: CodeQL (Python)
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'

    - name: Initialize CodeQL for Python
      uses: github/codeql-action/init@v4
      with:
        languages: python
        queries: security-extended
        build-mode: none

    - name: Analyze Python with CodeQL
      uses: github/codeql-action/analyze@v4
      with:
        category: "/language:python"

  codeql-go:
    name: CodeQL (Go)
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Detect Go source files
      id: detect-go
      run: |
        if git ls-files -- "*.go" | grep -q "."; then
          echo "has-go=true" >> "$GITHUB_OUTPUT"
        else
          echo "has-go=false" >> "$GITHUB_OUTPUT"
        fi

    - name: Set up Go
      if: steps.detect-go.outputs.has-go == 'true'
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Initialize CodeQL for Go
      if: steps.detect-go.outputs.has-go == 'true'
      uses: github/codeql-action/init@v4
      with:
        languages: go
        queries: security-extended
        build-mode: manual

    - name: Build Go modules for CodeQL
      if: steps.detect-go.outputs.has-go == 'true'
      run: |
        go mod tidy
        go build ./...

    - name: Analyze Go with CodeQL
      if: steps.detect-go.outputs.has-go == 'true'
      uses: github/codeql-action/analyze@v4
      with:
        category: "/language:go"

    - name: Skip Go analysis (no sources)
      if: steps.detect-go.outputs.has-go != 'true'
      run: echo "No Go source files detected; skipping CodeQL analysis."

  codeql-rust:
    name: CodeQL (Rust)
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Detect Rust crates
      id: detect-rust
      run: |
        if git ls-files -- "*.rs" | grep -q "."; then
          echo "has-rust=true" >> "$GITHUB_OUTPUT"
        else
          echo "has-rust=false" >> "$GITHUB_OUTPUT"
        fi

    - name: Set up Python for PyO3 builds
      if: steps.detect-rust.outputs.has-rust == 'true'
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'

    - name: Set up Rust
      if: steps.detect-rust.outputs.has-rust == 'true'
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Initialize CodeQL for Rust
      if: steps.detect-rust.outputs.has-rust == 'true'
      uses: github/codeql-action/init@v4
      with:
        languages: rust
        queries: security-extended
        build-mode: manual

    - name: Build Rust crates for CodeQL
      if: steps.detect-rust.outputs.has-rust == 'true'
      env:
        PYO3_PYTHON: python3
      run: |
        cargo --version
        cargo fetch
        cargo build --locked --all-targets --manifest-path rust/tradepulse-accel/Cargo.toml

    - name: Analyze Rust with CodeQL
      if: steps.detect-rust.outputs.has-rust == 'true'
      uses: github/codeql-action/analyze@v4
      with:
        category: "/language:rust"

    - name: Skip Rust analysis (no sources)
      if: steps.detect-rust.outputs.has-rust != 'true'
      run: echo "No Rust source files detected; skipping CodeQL analysis."
