name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly on Monday at 00:00 UTC
    - cron: '0 0 * * 1'

jobs:
  secret-scan:
    name: Scan for Secrets
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better scanning
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run custom secret scanner
      run: |
        python -c "
        from core.utils.security import check_for_hardcoded_secrets
        import sys
        if check_for_hardcoded_secrets('.'):
            sys.exit(1)
        "
    
    - name: Run Bandit security linter
      run: |
        bandit -r core/ backtest/ execution/ -f json -o bandit-report.json || true
        bandit -r core/ backtest/ execution/ -ll
    
    - name: Upload Bandit report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: bandit-report
        path: bandit-report.json

  dependency-scan:
    name: Scan Dependencies
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt
        pip install safety pip-audit
    
    - name: Check for known vulnerabilities with Safety
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Audit dependencies with pip-audit
      run: |
        # Run pip-audit and save the report
        pip-audit --desc -o pip-audit-report.json --format json || true
        
        # Display the full report for visibility
        pip-audit --desc || true
        
        # TEMPORARY WORKAROUND: Ignore known pip vulnerability GHSA-4xh5-x5gv-qwph (CVE-2025-8869)
        # This vulnerability is in pip itself and will be fixed in pip 25.3
        # We filter it out to avoid failing the build, but fail for any OTHER vulnerabilities
        # Reference: https://github.com/pypa/pip/security/advisories/GHSA-4xh5-x5gv-qwph
        
        # Use jq to check if there are any vulnerabilities OTHER than the known pip issue
        OTHER_VULNS=$(jq -r '
          [.dependencies[] | 
           select(.vulns != null and (.vulns | length) > 0) |
           .vulns[] |
           select(.id != "GHSA-4xh5-x5gv-qwph")
          ] | length
        ' pip-audit-report.json)
        
        echo "Found $OTHER_VULNS vulnerabilities (excluding GHSA-4xh5-x5gv-qwph)"
        
        if [ "$OTHER_VULNS" -gt 0 ]; then
          echo "ERROR: Found vulnerabilities other than the known pip issue GHSA-4xh5-x5gv-qwph"
          echo "Please review and fix these vulnerabilities:"
          jq -r '
            .dependencies[] | 
            select(.vulns != null and (.vulns | length) > 0) |
            .vulns[] |
            select(.id != "GHSA-4xh5-x5gv-qwph") |
            "  - \(.id): \(.description[:100])..."
          ' pip-audit-report.json
          exit 1
        else
          echo "SUCCESS: Only the known pip vulnerability GHSA-4xh5-x5gv-qwph is present"
          echo "This will be fixed when pip 25.3 is released"
        fi
    
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: dependency-reports
        path: |
          safety-report.json
          pip-audit-report.json

  dast-scan:
    name: Dynamic App Scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: apps/web/package-lock.json

    - name: Install web dependencies
      run: npm install --prefix apps/web --no-package-lock

    - name: Build Next.js application
      run: npm run build --prefix apps/web

    - name: Start Next.js application
      run: |
        cd apps/web
        npx next start -H 0.0.0.0 -p 3000 > ../../next.log 2>&1 &
        echo $! > ../../next.pid

    - name: Wait for application readiness
      run: npx --yes wait-on@7.0.1 http://127.0.0.1:3000

    - name: Run ZAP baseline scan
      uses: zaproxy/action-baseline@v0.12.0
      with:
        target: 'http://host.docker.internal:3000'
        cmd_options: '-m 5 -r zap-report.html -x zap-report.xml -J zap-report.json'
        allow_issue_writing: false
        fail_action: false

    - name: Evaluate ZAP results
      run: |
        if [ ! -f zap-report.json ]; then
          echo 'ZAP report zap-report.json not found'
          exit 1
        fi

        ALLOWLIST=$(jq '.ignore | map(.id)' configs/security/zap-allowlist.json)

        MEDIUM_OR_HIGH=$(jq --argjson allow "$ALLOWLIST" '
          [ (.site // [])[]
            | (.alerts // [])[]
            | select((.riskcode | tonumber) >= 2)
            | select(.pluginid as $pid | ($allow | index($pid)) | not)
          ]
        ' zap-report.json)

        MEDIUM_COUNT=$(echo "$MEDIUM_OR_HIGH" | jq '[ .[] | select((.riskcode | tonumber) == 2) ] | length')
        HIGH_ALERTS=$(echo "$MEDIUM_OR_HIGH" | jq '[ .[] | select((.riskcode | tonumber) >= 3) ]')
        HIGH_COUNT=$(echo "$HIGH_ALERTS" | jq 'length')

        if [ "$MEDIUM_COUNT" -gt 0 ]; then
          echo 'Medium severity alerts detected (review recommended):'
          echo "$MEDIUM_OR_HIGH" | jq -r '
            [ .[]
              | select((.riskcode | tonumber) == 2)
              | "- [ID \(.pluginid)] \(.alert // "Unknown alert") (severity: \(.riskdesc // ("riskcode " + (.riskcode // "n/a"))))"
            ] | .[]
          '
        else
          echo 'No medium severity alerts detected.'
        fi

        if [ "$HIGH_COUNT" -gt 0 ]; then
          echo 'ERROR: High severity alerts detected:'
          echo "$HIGH_ALERTS" | jq -r '
            [ .[]
              | "- [ID \(.pluginid)] \(.alert // "Unknown alert") (severity: \(.riskdesc // ("riskcode " + (.riskcode // "n/a"))))"
            ] | .[]
          '
          exit 1
        fi

        echo 'No unallowlisted high severity alerts detected.'

    - name: Upload ZAP artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: zap-dast-report
        path: |
          zap-report.json
          zap-report.xml
          zap-report.html
          next.log
        if-no-files-found: ignore

    - name: Stop Next.js application
      if: always()
      run: |
        if [ -f next.pid ]; then
          kill "$(cat next.pid)" || true
          rm -f next.pid
        fi

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python
        queries: security-extended

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:python"

  sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Generate SPDX SBOM
      uses: anchore/sbom-action@v0
      with:
        output-file: sbom.spdx.json
        format: spdx-json

    - name: Upload SBOM artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: sbom-spdx
        path: sbom.spdx.json
