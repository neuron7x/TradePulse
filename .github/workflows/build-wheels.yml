name: Build & Verify Python Wheels

on:
  push:
    branches: [main, master]
  pull_request:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }} (Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install cibuildwheel
        run: |
          python -m pip install --upgrade pip
          python -m pip install "cibuildwheel>=2.16"

      - name: Build wheels
        env:
          CIBW_BUILD: "cp${{ replace(matrix.python-version, '.', '') }}-*"
          CIBW_SKIP: "pp*"
          CIBW_ARCHS_MACOS: "universal2"
          CIBW_MANYLINUX_X86_64_IMAGE: "manylinux_2_28"
          CIBW_MUSLLINUX_X86_64_IMAGE: "musllinux_1_2"
        run: |
          cibuildwheel --output-dir wheelhouse

      - name: List built wheels
        shell: python
        run: |
          import math
          from pathlib import Path

          wheel_dir = Path("wheelhouse")
          if not wheel_dir.exists():
            raise SystemExit("wheelhouse directory not found")

          def _format_size(size: int) -> str:
            units = ["B", "KB", "MB", "GB", "TB"]
            if size <= 0:
              return "0 B"
            unit_index = min(int(math.log(size, 1024)), len(units) - 1)
            value = size / (1024 ** unit_index)
            if unit_index == 0:
              return f"{size} {units[unit_index]}"
            return f"{value:.2f} {units[unit_index]}"

          wheels = sorted(wheel_dir.glob("*.whl"))
          if not wheels:
            raise SystemExit("no wheel files found in wheelhouse")

          for wheel in wheels:
            size = wheel.stat().st_size
            print(f"{wheel.name}\t{_format_size(size)}")

      - name: Verify Linux wheels with auditwheel
        if: runner.os == 'Linux'
        run: |
          python -m pip install --upgrade pip
          python -m pip install auditwheel
          for whl in wheelhouse/*.whl; do
            if [[ "$whl" == *manylinux* || "$whl" == *musllinux* ]]; then
              auditwheel show "$whl"
            fi
          done

      - name: Verify macOS wheels with delocate
        if: runner.os == 'macOS'
        run: |
          python -m pip install --upgrade pip
          python -m pip install delocate
          for whl in wheelhouse/*.whl; do
            delocate-listdeps "$whl"
            delocate-wheel --check-archs universal2 "$whl"
          done

      - name: Upload wheels as artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}
          path: wheelhouse/*.whl
          if-no-files-found: error
