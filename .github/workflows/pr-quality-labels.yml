name: PR Quality Labels

on:
  pull_request_target:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review

permissions:
  contents: read
  pull-requests: write

jobs:
  ensure-labels:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const pull_number = context.payload.pull_request.number;
            const files = await github.paginate(github.rest.pulls.listFiles, {
              owner,
              repo,
              pull_number,
              per_page: 100,
            });

            const ensureLabel = async (name, color, description) => {
              try {
                await github.rest.issues.getLabel({ owner, repo, name });
              } catch (error) {
                if (error.status === 404) {
                  await github.rest.issues.createLabel({ owner, repo, name, color, description }).catch(() => {});
                }
              }
            };

            await ensureLabel('test-needed', 'b60205', 'Tests must be added or updated before merge.');
            await ensureLabel('missing-coverage', 'd93f0b', 'Coverage must meet repository thresholds.');

            const touchesTests = files.some(file => {
              const path = file.filename;
              return path.startsWith('tests/') || path.includes('/tests/') || path.endsWith('_test.py') || path.includes('.spec.') || path.includes('.test');
            });

            const labels = await github.paginate(github.rest.issues.listLabelsOnIssue, { owner, repo, issue_number: pull_number });
            const hasTestLabel = labels.some(label => label.name === 'test-needed');
            const hasCoverageLabel = labels.some(label => label.name === 'missing-coverage');

            if (!hasCoverageLabel) {
              await github.rest.issues.addLabels({ owner, repo, issue_number: pull_number, labels: ['missing-coverage'] });
            }

            if (!touchesTests && !hasTestLabel) {
              await github.rest.issues.addLabels({ owner, repo, issue_number: pull_number, labels: ['test-needed'] });
            } else if (touchesTests && hasTestLabel) {
              await github.rest.issues.removeLabel({ owner, repo, issue_number: pull_number, name: 'test-needed' }).catch(() => {});
            }
