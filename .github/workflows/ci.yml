name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: read
  checks: write
  pull-requests: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  PIP_CACHE_DIR: ~/.cache/pip
  PYTHON_DEFAULT: '3.11'
  COVERAGE_LINE_THRESHOLD: '92'
  COVERAGE_BRANCH_THRESHOLD: '85'

jobs:
  lint:
    name: Style & lint (pre-commit)
    uses: ./.github/workflows/lint.yml
    secrets: inherit

  type-check:
    name: Static type checking
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_DEFAULT }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: >-
            ${{ runner.os }}-py${{ env.PYTHON_DEFAULT }}-mypy-${{ hashFiles('requirements*.txt', 'pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-py${{ env.PYTHON_DEFAULT }}-mypy-
            ${{ runner.os }}-py${{ env.PYTHON_DEFAULT }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run mypy via pre-commit
        run: |
          pre-commit run mypy --all-files --hook-stage manual --show-diff-on-failure

      - name: Validate __slots__ usage
        run: |
          pre-commit run slotscheck --all-files --hook-stage manual --show-diff-on-failure

  dependency-audit:
    name: Dependency security scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_DEFAULT }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: >-
            ${{ runner.os }}-py${{ env.PYTHON_DEFAULT }}-security-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-py${{ env.PYTHON_DEFAULT }}-security-
            ${{ runner.os }}-py${{ env.PYTHON_DEFAULT }}-

      - name: Install security tooling
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit safety

      - name: pip-audit (requirements)
        run: |
          pip-audit -r requirements.txt -r requirements-dev.txt --progress-spinner=off

      - name: Safety check (full report)
        run: |
          safety check --file requirements.txt --file requirements-dev.txt --full-report

  tests:
    name: Test matrix (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    needs: [type-check, dependency-audit]
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11', '3.12']
    env:
      PYTHONPATH: .
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: >-
            ${{ runner.os }}-py${{ matrix.python-version }}-tests-${{ hashFiles('requirements*.txt', 'pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-py${{ matrix.python-version }}-tests-
            ${{ runner.os }}-py${{ matrix.python-version }}-

      - name: Install project dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Prepare report directories
        run: |
          mkdir -p reports/junit
          mkdir -p reports/coverage/html
          mkdir -p reports/metrics

      - name: Run pytest with coverage
        env:
          PYTEST_CURRENT_TEST_PY: ${{ matrix.python-version }}
        run: |
          pytest \
            -m "not flaky and not nightly" \
            tests \
            -n auto \
            --reruns 2 --reruns-delay 3 \
            --junitxml=reports/junit/pytest-${{ matrix.python-version }}.xml \
            --cov=analytics --cov=application --cov=backtest --cov=core --cov=domain --cov=execution --cov=interfaces --cov=markets --cov=observability --cov=tools \
            --cov-branch \
            --cov-report=xml:coverage.xml \
            --cov-report=term-missing:skip-covered \
            --cov-report=html:reports/coverage/html \
            --cov-fail-under=${{ env.COVERAGE_LINE_THRESHOLD }}

      - name: Summarise coverage
        id: coverage-summary
        env:
          PYTHON_VERSION: ${{ matrix.python-version }}
          LINE_THRESHOLD: ${{ env.COVERAGE_LINE_THRESHOLD }}
          BRANCH_THRESHOLD: ${{ env.COVERAGE_BRANCH_THRESHOLD }}
        run: |
          python - <<'PY'
          import json
          import os
          import pathlib
          import xml.etree.ElementTree as ET

          coverage_file = pathlib.Path('coverage.xml')
          if not coverage_file.exists():
              raise SystemExit('coverage.xml not found; pytest step likely failed')

          root = ET.parse(coverage_file).getroot()
          line_rate = float(root.get('line-rate', 0.0)) * 100
          branch_rate = float(root.get('branch-rate', 0.0)) * 100

          metrics_dir = pathlib.Path('reports/metrics')
          metrics_dir.mkdir(parents=True, exist_ok=True)
          metrics_path = metrics_dir / f"coverage-py{os.environ['PYTHON_VERSION']}.json"
          metrics_path.write_text(
              json.dumps(
                  {
                      'python': os.environ['PYTHON_VERSION'],
                      'line_rate': line_rate,
                      'branch_rate': branch_rate,
                      'line_threshold': float(os.environ['LINE_THRESHOLD']),
                      'branch_threshold': float(os.environ['BRANCH_THRESHOLD']),
                  },
                  indent=2,
              )
          )

          summary_lines = [
              f"### Coverage summary (Python {os.environ['PYTHON_VERSION']})",
              '',
              '| Metric | Percentage | Threshold |',
              '| --- | --- | --- |',
              f"| Line coverage | {line_rate:.2f}% | {os.environ['LINE_THRESHOLD']}% |",
              f"| Branch coverage | {branch_rate:.2f}% | {os.environ['BRANCH_THRESHOLD']}% |",
              '',
          ]

          step_summary = os.environ.get('GITHUB_STEP_SUMMARY')
          if step_summary:
              with open(step_summary, 'a', encoding='utf-8') as handle:
                  handle.write('\n'.join(summary_lines))

          output_file = os.environ.get('GITHUB_OUTPUT')
          if output_file:
              with open(output_file, 'a', encoding='utf-8') as handle:
                  handle.write(f"line_rate={line_rate:.2f}\n")
                  handle.write(f"branch_rate={branch_rate:.2f}\n")
          PY

      - name: Upload junit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-py${{ matrix.python-version }}
          path: reports/junit/pytest-${{ matrix.python-version }}.xml
          if-no-files-found: error

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-py${{ matrix.python-version }}
          path: |
            coverage.xml
            reports/coverage/html
          if-no-files-found: error

      - name: Upload coverage metrics
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-metrics-py${{ matrix.python-version }}
          path: reports/metrics/coverage-py${{ matrix.python-version }}.json
          if-no-files-found: error

      - name: Upload to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: py${{ matrix.python-version }}
          name: py${{ matrix.python-version }}-coverage
          fail_ci_if_error: true
          disable_search: true

  flaky-tests:
    name: Flaky test quarantine
    runs-on: ubuntu-latest
    needs: tests
    if: always()
    continue-on-error: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_DEFAULT }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: >-
            ${{ runner.os }}-py${{ env.PYTHON_DEFAULT }}-flaky-${{ hashFiles('requirements*.txt', 'pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-py${{ env.PYTHON_DEFAULT }}-flaky-
            ${{ runner.os }}-py${{ env.PYTHON_DEFAULT }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Prepare report directory
        run: |
          mkdir -p reports

      - name: Run quarantined flaky tests
        run: |
          set -o pipefail
          set +e
          pytest \
            -m flaky \
            tests \
            --reruns 2 --reruns-delay 3 \
            --junitxml=reports/flaky-tests.xml
          status=$?
          set -e
          if [ "$status" -eq 5 ]; then
            echo "No flaky tests collected; treating as success."
            exit 0
          fi
          exit "$status"

      - name: Upload flaky test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: flaky-tests
          path: reports/flaky-tests.xml
          if-no-files-found: warn

  coverage-gate:
    name: Coverage gate enforcement
    runs-on: ubuntu-latest
    needs: tests
    if: ${{ always() && needs.tests.result == 'success' }}
    steps:
      - name: Download coverage metrics
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-metrics-*
          path: coverage-metrics
          merge-multiple: true

      - name: Evaluate coverage thresholds
        env:
          LINE_THRESHOLD: ${{ env.COVERAGE_LINE_THRESHOLD }}
          BRANCH_THRESHOLD: ${{ env.COVERAGE_BRANCH_THRESHOLD }}
          EVENT_NAME: ${{ github.event_name }}
          REPO_SLUG: ${{ github.repository }}
          BASE_SHA: ${{ github.event.pull_request.base.sha }}
        run: |
          python - <<'PY'
          import json
          import os
          import pathlib
          import sys

          metrics_dir = pathlib.Path('coverage-metrics')
          if not metrics_dir.exists():
              raise SystemExit('Coverage metrics are missing; ensure tests job published them.')

          line_threshold = float(os.environ['LINE_THRESHOLD'])
          branch_threshold = float(os.environ['BRANCH_THRESHOLD'])

          failures = []
          rows = []
          for metrics_file in sorted(metrics_dir.glob('coverage-py*.json')):
              data = json.loads(metrics_file.read_text())
              line_rate = data['line_rate']
              branch_rate = data['branch_rate']
              python_version = data['python']

              rows.append(
                  (
                      python_version,
                      f"{line_rate:.2f}%",
                      f"{branch_rate:.2f}%",
                  )
              )

              if line_rate < line_threshold:
                  failures.append(
                      f"Python {python_version}: line coverage {line_rate:.2f}% below {line_threshold}%"
                  )
              if branch_rate < branch_threshold:
                  failures.append(
                      f"Python {python_version}: branch coverage {branch_rate:.2f}% below {branch_threshold}%"
                  )

          summary_path = pathlib.Path(os.environ['GITHUB_STEP_SUMMARY'])
          summary_lines = [
              '### Aggregated coverage summary',
              '',
              '| Python | Line | Branch |',
              '| --- | --- | --- |',
          ]
          summary_lines.extend([f"| {py} | {line} | {branch} |" for py, line, branch in rows])
          summary_lines.append('')
          summary_lines.append(f"**Line coverage threshold:** {line_threshold:.2f}%")
          summary_lines.append(f"**Branch coverage threshold:** {branch_threshold:.2f}%")
          summary_lines.append('')

          with summary_path.open('a', encoding='utf-8') as handle:
              handle.write('\n'.join(summary_lines))
              handle.write('\n')

          if failures:
              print('\n'.join(failures))
              sys.exit(1)

          # Optional guidance for "no negative delta" policy.
          if os.environ['EVENT_NAME'] == 'pull_request':
              print(
                  'Coverage thresholds met. Configure Codecov status checks to block negative deltas '
                  'via the repository settings if stricter gating is required.'
              )
          PY
