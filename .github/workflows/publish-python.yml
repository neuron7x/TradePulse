name: Publish Python package

on:
  release:
    types: [published]

permissions:
  contents: write
  id-token: write

jobs:
  verify-ci:
    name: Ensure release commit passed CI
    runs-on: ubuntu-latest
    permissions:
      actions: read
      checks: read
      contents: read
    steps:
      - name: Validate commit status
        uses: actions/github-script@v7
        with:
          script: |
            const core = require('@actions/core');
            const { owner, repo } = context.repo;
            const tagName = context.payload.release?.tag_name;
            if (!tagName) {
              core.setFailed('Unable to determine the release tag name.');
              return;
            }

            let ref;
            try {
              ref = await github.rest.git.getRef({ owner, repo, ref: `tags/${tagName}` });
            } catch (error) {
              core.setFailed(`Failed to locate tag ${tagName}: ${error.message}`);
              return;
            }

            let targetSha = ref.data.object.sha;
            let targetType = ref.data.object.type;
            if (targetType === 'tag') {
              const tagObject = await github.rest.git.getTag({ owner, repo, tag_sha: targetSha });
              targetSha = tagObject.data.object.sha;
              targetType = tagObject.data.object.type;
            }

            if (targetType !== 'commit') {
              core.setFailed(`Tag ${tagName} does not resolve to a commit (resolved type: ${targetType}).`);
              return;
            }

            const response = await github.rest.checks.listForRef({
              owner,
              repo,
              ref: targetSha,
              per_page: 100,
            });

            const workflowName = context.workflow;
            const checkRuns = response.data.check_runs.filter((run) => run.name !== workflowName);
            if (checkRuns.length === 0) {
              core.setFailed(`No completed CI checks found for commit ${targetSha}. Run the test matrix before releasing.`);
              return;
            }

            const pending = checkRuns.filter((run) => run.status !== 'completed');
            if (pending.length > 0) {
              const names = pending.map((run) => run.name).join(', ');
              core.setFailed(`CI checks still in progress for commit ${targetSha}: ${names}`);
              return;
            }

            const allowed = new Set(['success', 'neutral', 'skipped']);
            const failing = checkRuns.filter((run) => !allowed.has(run.conclusion ?? ''));
            if (failing.length > 0) {
              const names = failing.map((run) => `${run.name} (${run.conclusion})`).join(', ');
              core.setFailed(`Detected failing CI checks for commit ${targetSha}: ${names}`);
            }

  build:
    name: Build, sign, and package
    needs: verify-ci
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      actions: write
    outputs:
      version: ${{ steps.release.outputs.version }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure release tag is signed
        run: |
          tag="${{ github.event.release.tag_name }}"
          if ! git cat-file tag "$tag" | grep -q "BEGIN PGP SIGNATURE"; then
            echo "::error::Tag $tag is not signed with a GPG signature."
            exit 1
          fi

      - name: Validate release metadata
        id: release
        run: |
          tag="${{ github.event.release.tag_name }}"
          version="${tag#v}"
          if ! [[ "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z.-]+)?$ ]]; then
            echo "::error::Release tag '$tag' must follow SemVer (with optional leading 'v')."
            exit 1
          fi
          file_version="$(tr -d "\n" < VERSION)"
          if [ "$file_version" != "$version" ]; then
            echo "::error::VERSION file ($file_version) does not match release tag ($version)."
            exit 1
          fi
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'

      - name: Install release tooling
        run: |
          python -m pip install --upgrade pip
          python -m pip install towncrier==23.11.0 build==1.3.0 twine==5.1.1 cyclonedx-bom==4.0.0

      - name: Verify Towncrier fragments exist
        run: |
          set -euo pipefail
          if ! find newsfragments -type f ! -name 'README.md' ! -name '.gitkeep' -print -quit | grep -q .; then
            echo "::error::No Towncrier news fragments found. Add at least one fragment before releasing."
            exit 1
          fi

      - name: Build changelog with Towncrier
        id: changelog
        env:
          RELEASE_VERSION: ${{ steps.release.outputs.version }}
        run: |
          set -euo pipefail
          version="$RELEASE_VERSION"
          release_date="$(date -u +%Y-%m-%d)"
          towncrier build --yes --keep --version "$version" --date "$release_date"
          towncrier build --draft --version "$version" --date "$release_date" > release-notes.md
          echo "release_date=$release_date" >> "$GITHUB_OUTPUT"

      - name: Publish release notes and changelog
        uses: softprops/action-gh-release@v2
        with:
          body_path: release-notes.md
          files: |
            release-notes.md
            CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build wheel and sdist
        run: |
          python -m build --sdist --wheel --outdir dist

      - name: Verify distribution metadata
        run: |
          twine check dist/*

      - name: Generate CycloneDX SBOM inputs
        run: |
          python - <<'PY'
          from pathlib import Path

          sources = [
              Path('requirements.txt'),
              Path('requirements-dev.txt'),
          ]
          combined = Path('sbom/combined-requirements.txt')
          combined.parent.mkdir(parents=True, exist_ok=True)

          def write_requirements(source: Path, fh, seen: set[Path]) -> None:
              source = source.resolve()
              if source in seen or not source.is_file():
                  return
              seen.add(source)

              for line in source.read_text(encoding='utf-8').splitlines():
                  stripped = line.strip()
                  if not stripped or stripped.startswith('#'):
                      fh.write(line + '\n')
                      continue

                  if stripped.startswith('-r') or stripped.startswith('--requirement'):
                      try:
                          _, include_path = stripped.split(None, 1)
                      except ValueError:
                          continue
                      include = (source.parent / include_path).resolve()
                      write_requirements(include, fh, seen)
                      continue

                  fh.write(line + '\n')

          with combined.open('w', encoding='utf-8') as fh:
              seen: set[Path] = set()
              for source in sources:
                  write_requirements(source, fh, seen)
          PY

      - name: Generate CycloneDX SBOM artifacts
        run: |
          python -m cyclonedx_py requirements sbom/combined-requirements.txt --output-format JSON --output-file sbom/cyclonedx-sbom.json
          python -m cyclonedx_py requirements sbom/combined-requirements.txt --output-format XML --output-file sbom/cyclonedx-sbom.xml

      - name: Validate CycloneDX artifacts
        run: |
          python - <<'PY'
          from pathlib import Path
          from cyclonedx.validation import make_schemabased_validator, OutputFormat
          from cyclonedx.schema import SchemaVersion

          sbom_dir = Path('sbom')
          artifacts = [
              (sbom_dir / 'cyclonedx-sbom.json', OutputFormat.JSON),
              (sbom_dir / 'cyclonedx-sbom.xml', OutputFormat.XML),
          ]

          for path, output_format in artifacts:
              if not path.is_file():
                  raise SystemExit(f'Missing SBOM artifact: {path}')
              validator = make_schemabased_validator(output_format=output_format, schema_version=SchemaVersion.V1_6)
              validator.validate_str(path.read_text(encoding='utf-8'))
          print('CycloneDX validation succeeded for all artifacts.')
          PY

      - name: Sign distributions with Sigstore
        uses: sigstore/gh-action-sigstore-python@v3.4.0
        with:
          inputs: |
            dist/*.tar.gz
            dist/*.whl

      - name: Upload distribution artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tradepulse-distributions
          path: |
            dist/*.tar.gz
            dist/*.whl
            dist/*.tar.gz.sig
            dist/*.tar.gz.crt
            dist/*.whl.sig
            dist/*.whl.crt
          if-no-files-found: error

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tradepulse-sbom
          path: |
            sbom/cyclonedx-sbom.json
            sbom/cyclonedx-sbom.xml
          if-no-files-found: error

  testpypi-dry-run:
    name: Dry-run publish to TestPyPI
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      actions: read
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: tradepulse-distributions
          path: dist

      - name: Dry-run upload to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          repository-url: https://test.pypi.org/legacy/
          dry-run: true
          print-hash: true

  publish:
    name: Publish to PyPI
    needs:
      - build
      - testpypi-dry-run
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      actions: read
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: tradepulse-distributions
          path: dist

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          print-hash: true

      - name: Download SBOM artifacts
        uses: actions/download-artifact@v4
        with:
          name: tradepulse-sbom
          path: sbom

      - name: Attach release artifacts
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*
            sbom/cyclonedx-sbom.json
            sbom/cyclonedx-sbom.xml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
