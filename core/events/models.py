# Auto-generated by tools/schema/generate_event_types.py. DO NOT EDIT.
from __future__ import annotations

from dataclasses import dataclass, field
from typing import Dict, Optional
from enum import Enum


class FillLiquidity(Enum):
    MAKER = "MAKER"
    TAKER = "TAKER"


class FillStatus(Enum):
    PARTIAL = "PARTIAL"
    FILLED = "FILLED"
    CANCELLED = "CANCELLED"


class OrderSide(Enum):
    BUY = "BUY"
    SELL = "SELL"


class OrderType(Enum):
    MARKET = "MARKET"
    LIMIT = "LIMIT"
    STOP = "STOP"
    STOP_LIMIT = "STOP_LIMIT"


class SignalDirection(Enum):
    BUY = "BUY"
    SELL = "SELL"
    FLAT = "FLAT"


class TimeInForce(Enum):
    GTC = "GTC"
    DAY = "DAY"
    IOC = "IOC"
    FOK = "FOK"


@dataclass
class BarEvent:
    """Aggregated OHLCV bar for a symbol and interval."""
    event_id: str
    schema_version: int
    symbol: str
    timestamp: int
    interval: str
    open: float
    high: float
    low: float
    close: float
    volume: float
    vwap: Optional[float] = None
    trade_count: Optional[int] = None


@dataclass
class FillEvent:
    """Execution fill acknowledgment for an order."""
    event_id: str
    schema_version: int
    symbol: str
    timestamp: int
    order_id: str
    fill_id: str
    status: FillStatus
    filled_qty: float
    fill_price: float
    fees: Optional[float] = None
    liquidity: Optional[FillLiquidity] = None
    metadata: Dict[str, str] = field(default_factory=dict)


@dataclass
class OrderEvent:
    """Order instruction emitted by the execution service."""
    event_id: str
    schema_version: int
    symbol: str
    timestamp: int
    order_id: str
    side: OrderSide
    order_type: OrderType
    quantity: float
    price: Optional[float] = None
    time_in_force: Optional[TimeInForce] = None
    routing: Optional[str] = None
    metadata: Dict[str, str] = field(default_factory=dict)


@dataclass
class SignalEvent:
    """Generated trading signal with metadata and routing hints."""
    event_id: str
    schema_version: int
    symbol: str
    timestamp: int
    signal_type: str
    strength: float
    direction: SignalDirection
    ttl_seconds: Optional[int] = None
    metadata: Dict[str, str] = field(default_factory=dict)


@dataclass
class TickEvent:
    """Real-time market tick update for a single symbol."""
    event_id: str
    schema_version: int
    symbol: str
    timestamp: int
    bid_price: float
    ask_price: float
    last_price: Optional[float] = None
    volume: Optional[int] = None
    microstructure: Optional[TickMicrostructure] = None


@dataclass
class TickMicrostructure:
    bid_size: Optional[int] = None
    ask_size: Optional[int] = None
    trade_condition: Optional[str] = None

